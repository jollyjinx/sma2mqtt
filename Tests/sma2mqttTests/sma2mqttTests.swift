import XCTest
import class Foundation.Bundle

@testable import JLog
@testable import BinaryCoder
@testable import sma2mqttLibrary

func hex(from string: String) -> Data
{
    let stringWithoutSpaces = string.replacingOccurrences(of:" ", with:"")
                                .replacingOccurrences(of:"\n", with:"")
                                .replacingOccurrences(of:"\t", with:"")

    let uInt8Array = stride(from: 0, to: stringWithoutSpaces.count, by: 2)
        .map{ stringWithoutSpaces[stringWithoutSpaces.index(stringWithoutSpaces.startIndex, offsetBy: $0) ... stringWithoutSpaces.index(stringWithoutSpaces.startIndex, offsetBy: $0 + 1)] }
        .map{ UInt8($0, radix: 16)! }
    return Data(uInt8Array)
}
struct DataSplitter:Sequence, IteratorProtocol
{
    let data : Data
    var index : Data.Index
    let splitData:Data

    init(data: Data,splitData:Data) {
        self.data = data
        self.splitData = splitData
        self.index = data.startIndex
        print("init")
    }

    mutating func next() -> Data?
    {
//        print("\(#line) index:\(index)")

        guard self.index != self.data.endIndex else { return nil }

//        print("\(#line) index:\(index)")

        guard let range = data[index ..< data.endIndex].range(of: splitData)
        else
        {
//        print("\(#line) index:\(index)")
            if index == data.startIndex
            {
                index = data.endIndex
                return nil
            }

            let returnData = data[ (index-splitData.count) ..< data.endIndex]
            index = data.endIndex
            return returnData
        }
//        print("\(#line) index:\(index) range:\(range) ")

        if index == data.startIndex
        {
//        print("\(#line) index:\(index) range:\(range) ")
            index = range.endIndex
            return next()
        }
//        print("\(#line) index:\(index) range:\(range) ")

        let returnData = data[ (index-splitData.count) ..< range.startIndex]
        index = range.endIndex

        return returnData
    }
}

extension Data {
    func split(separator: Data) -> [Data]
    {

        var chunks: [Data] = []
        var pos = startIndex
        // Find next occurrence of separator after current position:
        while let r = self[pos...].range(of: separator)
        {
            // Append if non-empty:
            if r.lowerBound > pos
            {
                chunks.append(self[(pos - separator.count)..<r.lowerBound])
            }
            // Update current position:
            pos = r.upperBound
        }
        // Append final chunk, if non-empty:
        if pos < endIndex
        {
            chunks.append(self[pos..<endIndex])
        }
        return chunks
    }
}


final class sma2mqttTests: XCTestCase
{
    func testSMADecoding() throws
    {
        JLog.loglevel = .trace
        
        let data  = hex(from:"534d4100 0004 02a0 00000001 0046 0010 6065 11 e0 07050102030400a19901f6 a22fb3 0001 0000 0000f1b10102005400000000010000000101260068d50f613b975300000000000122260068d50f61b81f00000000000000000000")

        let binaryDecoder = BinaryDecoder(data: [UInt8](data) )
        let packet = try? SMAPacket(fromBinary:binaryDecoder)
        JLog.debug("Packet:\(packet)")
        let packet2 = try? SMAPacket(data:data)
        JLog.debug("Packet2:\(packet2)")

        XCTAssert(true)
    }


    func testSMANetDecoding() throws
    {
        JLog.loglevel = .trace

        let data1  = hex(from:"534d 4100 0004 02a0 0000 0001 003a 0010 6065 0ea0 ffff ffff ffff 0001 1234 25f6 4321 0001 0000 0000 0180 0c04 fdff 0700 0000 8403 0000 4c20 cb51 0000 0000 dbb8 f4e9 fae7 ddfb edfa 8888 0000")
        let binaryDecoder1 = BinaryDecoder(data: [UInt8](data1) )

        let packet1 = try? SMAPacket(fromBinary:binaryDecoder1)

        assert(binaryDecoder1.isAtEnd)
    }

    func testSMAFile() throws
    {
        JLog.loglevel = .info
        let data = try Data(contentsOf: URL(fileURLWithPath:"/Users/jolly/Documents/GitHub/sma2mqtt/Temp/Reverseengineering/testswift.sma"),options:.mappedRead)
        let separator = Data(bytes: [0x53, 0x4d, 0x41, 0x00] )

        var counter = 0
        let splitter = DataSplitter(data: data, splitData: separator)
        for chunk in splitter
        {
            counter += 1
            let binaryDecoder = BinaryDecoder(data: [UInt8](chunk) )
            if counter % 1000 == 0
            {
                print(counter)
            }


            do
            {
                let packet = try SMAPacket(fromBinary:binaryDecoder)

                JLog.debug("Packet \(counter):\(packet)")
            }
            catch
            {
                JLog.error("Packet \(counter): got error: \(error) data:\(chunk.hexDump)")
            }
        }

        XCTAssert(true)
    }

    func testSMANetPacketDecoding() throws
    {
        JLog.loglevel = .debug
        let data1 = hex(from:"""
1800 0000 2f00 0000
01  2952  00 3fd5 9462  0000 0000 0000 0000 1027 0000 1027 0000 ffff ffff ffff ffff ffff ffff ffff ffff
01  2752  00 3fd59462  0000 0000 0000 0000 321e 0000 321e 0000 a00f 0000 a00f 0000 ffff ffff ffff ffff
01  aa4a  08 0ed59462  3301 0001 b706 0000 feff ff00 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000
01  bb4a  08 37d59462  260d 0001 270d 0000 280d 0000 290d 0000 feff ff00 0000 0000 0000 0000 0000 0000
01  bc4a  08 3ed59462  2f01 0001 3301 0000 bd06 0000 5208 0000 fd0c 0000 620d 0000 feff ff00 0000 0000
01  2a52  08 3fd59462  1104 0000 1204 0000 fdff ff01 feff ff00 0000 0000 0000 0000 0000 0000 0000 0000
01  2f52  08 3fd59462  2f01 0000 3401 0001 2203 0000 1f0d 0000 fdff ff00 feff ff00 0000 0000 0000 0000
01  1e4b  08 40d59462  2508 0000 5208 0000 6c08 0000 feff ff00 0000 0000 0000 0000 0000 0000 0000 0000
01  1e4b  08 40d59462  2f01 0001 3301 0000 b706 0000 bd06 0000 f007 0000 f107 0000 f207 0000 f707 0000
01  2465  08 84659162  2300 0000 2f01 0001 3301 0000 c701 0000 feff ff00 0000 0000 0000 0000 0000 0000
01  2465  08 84659162  2300 0000 2f01 0001 3301 0000 c701 0000 feff ff00 0000 0000 0000 0000 0000 0000
01  2465  08 84659162  2300 0000 2f01 0001 3301 0000 c701 0000 feff ff00 0000 0000 0000 0000 0000 0000
01  2465  08 84659162  2300 0000 2f01 0001 3301 0000 c701 0000 feff ff00 0000 0000 0000 0000 0000 0000
01  2465  08 84659162  2300 0000 2f01 0001 3301 0000 c701 0000 feff ff00 0000 0000 0000 0000 0000 0000
01  2465  08 84659162  2300 0000 2f01 0001 3301 0000 c701 0000 feff ff00 0000 0000 0000 0000 0000 0000
01  2465  08 84659162  2300 0000 2f01 0001 3301 0000 c701 0000 feff ff00 0000 0000 0000 0000 0000 0000
01  2465  08 84659162  2300 0000 2f01 0001 3301 0000 c701 0000 feff ff00 0000 0000 0000 0000 0000 0000
01  2465  08 84659162  2300 0000 2f01 0001 3301 0000 c701 0000 feff ff00 0000 0000 0000 0000 0000 0000
01  2465  08 84659162  2300 0000 2f01 0001 3301 0000 c701 0000 feff ff00 0000 0000 0000 0000 0000 0000
01  b74a  10 37d59462  0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000

01  b84a  10 37d59462  0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000
01  b94a  10 37d59462  0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000
01  ba4a  10 37d59462  0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000

01  2852  40 3fd59462  0000 0000 0000 0000 321e 0000 321e 0000 0000 0080 0000 0080 0000 0080 0000 0080
""")
        let binaryDecoder1 = BinaryDecoder(data: [UInt8](data1) )
        let packet1 = try? SMANetPacketValue(fromBinary:binaryDecoder1)
    }

    func testSMANetPacketDecoding2a() throws
    {
        JLog.loglevel = .debug
        let data1 = hex(from:"""
0000 0000 2200 0000
01  1f41  00  3fd59462  0000 0000 0000 0000 0000 0000 0000 0000 0000 0000
01  2041  00  3fd59462  0000 0000 0000 0000 0000 0000 0000 0000 0000 0000
01  1e41  00  3fd59462  a00f 0000 a00f 0000 a00f 0000 a00f 0000 0100 0000
01  6641  00  3fd59462  ffff ffff ffff ffff ffff ffff ffff ffff 0100 0000
01  8041  00  3fd59462  ffff ffff ffff ffff ffff ffff ffff ffff 0100 0000
01  4946  00  40d59462  275c 0000 275c 0000 275c 0000 275c 0000 0100 0000
01  4e46  00  40d59462  6300 0000 6300 0000 6300 0000 6300 0000 0100 0000
01  5746  00  40d59462  8513 0000 8513 0000 8513 0000 8513 0000 0100 0000
01  8146  00  40d59462  8513 0000 8513 0000 8513 0000 8513 0000 0100 0000
01  c246  00  40d59462  ad03 0000 ad03 0000 ad03 0000 ad03 0000 0100 0000
01  4846  00  40d59462  ffff ffff ffff ffff ffff ffff ffff ffff 0100 0000
01  4a46  00  40d59462  ffff ffff ffff ffff ffff ffff ffff ffff 0100 0000
01  4b46  00  40d59462  ffff ffff ffff ffff ffff ffff ffff ffff 0100 0000
01  4c46  00  40d59462  ffff ffff ffff ffff ffff ffff ffff ffff 0100 0000
01  4d46  00  40d59462  ffff ffff ffff ffff ffff ffff ffff ffff 0100 0000
01  7746  00  40d59462  ffff ffff ffff ffff ffff ffff ffff ffff 0100 0000
01  7846  00  40d59462  ffff ffff ffff ffff ffff ffff ffff ffff 0100 0000
01  7946  00  40d59462  ffff ffff ffff ffff ffff ffff ffff ffff 0100 0000

01  3746  40  40d59462  0000 0000 0000 0000 0000 0000 0000 0000 0100 0000
01  4046  40  40d59462  0000 0080 0000 0080 0000 0080 0000 0080 0100 0000
01  4246  40  40d59462  0000 0080 0000 0080 0000 0080 0000 0080 0100 0000
01  5346  40  40d59462  0000 0080 0000 0080 0000 0080 0000 0080 0100 0000
01  5546  40  40d59462  0000 0080 0000 0080 0000 0080 0000 0080 0100 0000
01  9946  40  40d59462  0000 0080 0000 0080 0000 0080 0000 0080 0100 0000
01  6546  40  40d59462  1a0a 0000 1a0a 0000 1a0a 0000 1a0a 0000 0100 0000
01  3646  40  40d59462  2805 0000 2805 0000 2805 0000 2805 0000 0100 0000
01  8f46  40  40d59462  2f05 0000 2f05 0000 2f05 0000 2f05 0000 0100 0000
01  6c46  40  40d59462  5e02 0000 5e02 0000 5e02 0000 5e02 0000 0100 0000
01  6d46  40  40d59462  6b03 0000 6b03 0000 6b03 0000 6b03 0000 0100 0000
01  6b46  40  40d59462  8b03 0000 8b03 0000 8b03 0000 8b03 0000 0100 0000
01  3f26  40  40d59462  ad03 0000 ad03 0000 ad03 0000 ad03 0000 0100 0000
01  4146  40  40d59462  ad03 0000 ad03 0000 ad03 0000 ad03 0000 0100 0000
01  6e46  40  40d59462  b900 0000 b900 0000 b900 0000 b900 0000 0100 0000
01  6646  40  40d59462  df0e 0000 df0e 0000 df0e 0000 df0e 0000 0100 0000
01  5446  40  40d59462  f90f 0000 f90f 0000 f90f 0000 f90f 0000 0100 0000
""")
        let binaryDecoder1 = BinaryDecoder(data: [UInt8](data1) )
        let packet1 = try? SMANetPacketValue(fromBinary:binaryDecoder1)
    }

    func testSMANetPacketDecoding2() throws
    {
        JLog.loglevel = .debug
        let data1 = hex(from:"""

0000 0000 0900 0000
0101 2600 56d59462 b43b 7f00 0000 0000
0122 2600 57d59462 0248 0000 0000 0000
0124 4600 57d59462 b67c 8700 0000 0000
0125 4600 57d59462 8cb0 1200 0000 0000
012e 4600 56d59462 bafe cd01 0000 0000
012f 4600 56d59462 93b7 bb01 0000 0000
0191 4600 57d59462 1eb2 9e00 0000 0000
0192 4600 57d59462 c4a5 3500 0000 0000
01c3 4600 56d59462 b43b 7f00 0000 0000
018c 6100 af659162 3508 0000 0000 0000
""")
        let binaryDecoder1 = BinaryDecoder(data: [UInt8](data1) )
        let packet1 = try? SMANetPacketValue(fromBinary:binaryDecoder1)
    }
    func testSMANetPacketDecoding3() throws
    {
        JLog.loglevel = .debug
        let data1 = hex(from:"""

0000 0000 2200 0000
01 1f41 00  3fd59462  0000 0000 0000 0000 0000 0000 0000 0000 0000 0000
01 2041 00  3fd59462  0000 0000 0000 0000 0000 0000 0000 0000 0000 0000
01 1e41 00  3fd59462  a00f 0000 a00f 0000 a00f 0000 a00f 0000 0100 0000
01 6641 00  3fd59462  ffff ffff ffff ffff ffff ffff ffff ffff 0100 0000
01 8041 00  3fd59462  ffff ffff ffff ffff ffff ffff ffff ffff 0100 0000
01 4946 00  41d59462  255c 0000 255c 0000 255c 0000 255c 0000 0100 0000
01 4e46 00  41d59462  6300 0000 6300 0000 6300 0000 6300 0000 0100 0000
01 5746 00  41d59462  8613 0000 8613 0000 8613 0000 8613 0000 0100 0000
01 8146 00  41d59462  8613 0000 8613 0000 8613 0000 8613 0000 0100 0000
01 c246 00  41d59462  ae03 0000 ae03 0000 ae03 0000 ae03 0000 0100 0000
01 4846 00  41d59462  ffff ffff ffff ffff ffff ffff ffff ffff 0100 0000
01 4a46 00  41d59462  ffff ffff ffff ffff ffff ffff ffff ffff 0100 0000
01 4b46 00  41d59462  ffff ffff ffff ffff ffff ffff ffff ffff 0100 0000
01 4c46 00  41d59462  ffff ffff ffff ffff ffff ffff ffff ffff 0100 0000
01 4d46 00  41d59462  ffff ffff ffff ffff ffff ffff ffff ffff 0100 0000
01 7746 00  41d59462  ffff ffff ffff ffff ffff ffff ffff ffff 0100 0000
01 7846 00  41d59462  ffff ffff ffff ffff ffff ffff ffff ffff 0100 0000
01 7946 00  41d59462  ffff ffff ffff ffff ffff ffff ffff ffff 0100 0000

01 3746 40  41d59462  0000 0000 0000 0000 0000 0000 0000 0000 0100 0000
01 4046 40  41d59462  0000 0080 0000 0080 0000 0080 0000 0080 0100 0000
01 4246 40  41d59462  0000 0080 0000 0080 0000 0080 0000 0080 0100 0000
01 5346 40  41d59462  0000 0080 0000 0080 0000 0080 0000 0080 0100 0000
01 5546 40  41d59462  0000 0080 0000 0080 0000 0080 0000 0080 0100 0000
01 9946 40  41d59462  0000 0080 0000 0080 0000 0080 0000 0080 0100 0000
01 6546 40  41d59462  1b0a 0000 1b0a 0000 1b0a 0000 1b0a 0000 0100 0000
01 3646 40  41d59462  2705 0000 2705 0000 2705 0000 2705 0000 0100 0000
01 8f46 40  41d59462  2e05 0000 2e05 0000 2e05 0000 2e05 0000 0100 0000
01 6c46 40  41d59462  5e02 0000 5e02 0000 5e02 0000 5e02 0000 0100 0000
01 6d46 40  41d59462  6b03 0000 6b03 0000 6b03 0000 6b03 0000 0100 0000
01 6b46 40  41d59462  8e03 0000 8e03 0000 8e03 0000 8e03 0000 0100 0000
01 3f26 40  41d59462  ae03 0000 ae03 0000 ae03 0000 ae03 0000 0100 0000
01 4146 40  41d59462  ae03 0000 ae03 0000 ae03 0000 ae03 0000 0100 0000
01 6e46 40  41d59462  ba00 0000 ba00 0000 ba00 0000 ba00 0000 0100 0000
01 6646 40  41d59462  e20e 0000 e20e 0000 e20e 0000 e20e 0000 0100 0000
01 5446 40  41d59462  f70f 0000 f70f 0000 f70f 0000 f70f 0000 0100 0000
""")
        let binaryDecoder1 = BinaryDecoder(data: [UInt8](data1) )
        let packet1 = try? SMANetPacketValue(fromBinary:binaryDecoder1)
    }
    func testSMANetPacketDecoding4() throws
    {
        JLog.loglevel = .debug
        let data1 = hex(from:"""
0000 0000 0500 0000
01  1e25  40  56d59462  1d02 0000 1d02 0000 1d02 0000 1d02 0000 0100 0000
02  1e25  40  56d59462  e101 0000 e101 0000 e101 0000 e101 0000 0100 0000
01  1f45  40  56d59462  f99d 0000 f99d 0000 f99d 0000 f99d 0000 0100 0000
02  1f45  40  56d59462  8182 0000 8182 0000 8182 0000 8182 0000 0100 0000
01  2145  40  56d59462  3a05 0000 3a05 0000 3a05 0000 3a05 0000 0100 0000
02  2145  40  56d59462  a105 0000 a105 0000 a105 0000 a105 0000 0100 0000
""")
        let binaryDecoder1 = BinaryDecoder(data: [UInt8](data1) )
        let packet1 = try? SMANetPacketValue(fromBinary:binaryDecoder1)
    }


    func testSMANetPacketDecoding5() throws
    {
        JLog.loglevel = .trace
        let data1 = hex(from:"""
534d 4100
0004 02a0
0000 0001
03fa 0010
6065
fea0 1234 5a97 4321 00a1 9901 f6a2 2fb3 0001 0000
eb00 54f6 0102 005d

0000 0000 3000 0000
00 0000 00 0000 0000 0000 0000 0000 0000 0000 0000
01 0000 01 5370 7400 0000 0000 0000 0000 0000 0000
02 0000 01 4163 746c 5661 6c00 0000 0000 0000 0000
03 0000 01 4163 7450 7772 0000 0000 0000 0000 0000
04 0000 00 5b64 426d 5d00 0000 0000 0000 0000 0000
05 0000 00 5b64 6567 5d00 0000 0000 0000 0000 0000
06 0000 00 5b68 5d00 0000 0000 0000 0000 0000 0000
07 0000 00 5b48 7a5d 0000 0000 0000 0000 0000 0000
08 0000 00 5b6b 5768 5d00 0000 0000 0000 0000 0000
09 0000 00 5b6d 2f73 5d00 0000 0000 0000 0000 0000
0a 0000 00 5b6d 735d 0000 0000 0000 0000 0000 0000
0b 0000 00 5b4f 686d 5d00 0000 0000 0000 0000 0000
0c 0000 00 5b50 615d 0000 0000 0000 0000 0000 0000
0d 0000 00 5b73 5d00 0000 0000 0000 0000 0000 0000
0e 0000 00 5b56 5d00 0000 0000 0000 0000 0000 0000
0f 0000 00 5b56 415d 0000 0000 0000 0000 0000 0000
10 0000 00 5b56 4172 5d00 0000 0000 0000 0000 0000
11 0000 00 5b57 2f6d b25d 0000 0000 0000 0000 0000
12 0000 00 5b57 5d00 0000 0000 0000 0000 0000 0000
13 0000 00 5b57 685d 0000 0000 0000 0000 0000 0000
14 0000 00 4100 0000 0000 0000 0000 0000 0000 0000
15 0000 00 4162 7347 7269 5377 436e 7400 0000 0000
16 0000 00 4162 734f 7054 6d73 0000 0000 0000 0000
17 0000 00 4162 7346 6565 6454 6d73 0000 0000 0000
18 0000 00 4162 7357 6849 6e00 0000 0000 0000 0000
19 0000 00 4162 7357 684f 7574 0000 0000 0000 0000
1a 0000 00 4163 6b6e 0000 0000 0000 0000 0000 0000
1b 0000 00 4164 6a00 0000 0000 0000 0000 0000 0000
1c 0000 00 4169 6400 0000 0000 0000 0000 0000 0000
1d 0000 00 4163 7143 6e74 0000 0000 0000 0000 0000
1e 0000 00 4163 7154 6d00 0000 0000 0000 0000 0000
1f 0000 00 5b4b 5d00 0000 0000 0000 0000 0000 0000
20 0000 00 5bb0 465d 0000 0000 0000 0000 0000 0000
21 0000 00 5b57 2f73 5d00 0000 0000 0000 0000 0000
22 0000 00 5b6d 696e 5d00 0000 0000 0000 0000 0000
23 0000 00 416c 6d00 0000 0000 0000 0000 0000 0000
24 0000 00 414d 6178 4f66 7300 0000 0000 0000 0000
25 0000 00 414d 6178 4f66 7354 6d6d 7300 0000 0000
26 0000 00 416d 7000 0000 0000 0000 0000 0000 0000
27 0000 00 416d 704e 6f6d 0000 0000 0000 0000 0000
28 0000 00 416e 6746 6163 7400 0000 0000 0000 0000
29 0000 00 414e 6f6d 0000 0000 0000 0000 0000 0000
2a 0000 00 4153 3437 3737 2e33 0000 0000 0000 0000
2b 0000 00 4e6f 7441 646a 0000 0000 0000 0000 0000
2c 0000 00 4175 7831 0000 0000 0000 0000 0000 0000
2d 0000 00 4175 7832 0000 0000 0000 0000 0000 0000
2e 0000 00 4261 7400 0000 0000 0000 0000 0000 0000
2f 0000 00 4274 5077 7200 0000 0000 0000 0000 0000
30 0000 00 4361 6200 0000 0000 0000 0000 0000 0000

0000 0000
""")
        print(data1.hexDump)
        let binaryDecoder1 = BinaryDecoder(data: [UInt8](data1) )
        let packet1 = try? SMAPacket(fromBinary:binaryDecoder1)
    }



}


/*




1800 0000 2f00 0000
01aa 4a08 0ed5 9462 3301 0001 b706 0000 feff ff00 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000
01b7 4a10 37d5 9462 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000
01b8 4a10 37d5 9462 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000
01b9 4a10 37d5 9462 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000
01ba 4a10 37d5 9462 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000
01bb 4a08 37d5 9462 260d 0001 270d 0000 280d 0000 290d 0000 feff ff00 0000 0000 0000 0000 0000 0000
01bc 4a08 3ed5 9462 2f01 0001 3301 0000 bd06 0000 5208 0000 fd0c 0000 620d 0000 feff ff00 0000 0000
011e 4b08 40d5 9462 2f01 0001 3301 0000 b706 0000 bd06 0000 f007 0000 f107 0000 f207 0000 f707 0000
011e 4b08 40d5 9462 2508 0000 5208 0000 6c08 0000 feff ff00 0000 0000 0000 0000 0000 0000 0000 0000
0127 5200 3fd5 9462 0000 0000 0000 0000 321e 0000 321e 0000 a00f 0000 a00f 0000 ffff ffff ffff ffff
0128 5240 3fd5 9462 0000 0000 0000 0000 321e 0000 321e 0000 0000 0080 0000 0080 0000 0080 0000 0080
0129 5200 3fd5 9462 0000 0000 0000 0000 1027 0000 1027 0000 ffff ffff ffff ffff ffff ffff ffff ffff
012a 5208 3fd5 9462 1104 0000 1204 0000 fdff ff01 feff ff00 0000 0000 0000 0000 0000 0000 0000 0000
012f 5208 3fd5 9462 2f01 0000 3401 0001 2203 0000 1f0d 0000 fdff ff00 feff ff00 0000 0000 0000 0000
0124 6508 8465 9162 2300 0000 2f01 0001 3301 0000 c701 0000 feff ff00 0000 0000 0000 0000 0000 0000
0124 6508 8465 9162 2300 0000 2f01 0001 3301 0000 c701 0000 feff ff00 0000 0000 0000 0000 0000 0000
0124 6508 8465 9162 2300 0000 2f01 0001 3301 0000 c701 0000 feff ff00 0000 0000 0000 0000 0000 0000
0124 6508 8465 9162 2300 0000 2f01 0001 3301 0000 c701 0000 feff ff00 0000 0000 0000 0000 0000 0000
0124 6508 8465 9162 2300 0000 2f01 0001 3301 0000 c701 0000 feff ff00 0000 0000 0000 0000 0000 0000
0124 6508 8465 9162 2300 0000 2f01 0001 3301 0000 c701 0000 feff ff00 0000 0000 0000 0000 0000 0000
0124 6508 8465 9162 2300 0000 2f01 0001 3301 0000 c701 0000 feff ff00 0000 0000 0000 0000 0000 0000
0124 6508 8465 9162 2300 0000 2f01 0001 3301 0000 c701 0000 feff ff00 0000 0000 0000 0000 0000 0000
0124 6508 8465 9162 2300 0000 2f01 0001 3301 0000 c701 0000 feff ff00 0000 0000 0000 0000 0000 0000
0124 6508 8465 9162 2300 0000 2f01 0001 3301 0000 c701 0000 feff ff00 0000 0000 0000 0000 0000 0000





3000 0000 4700 0000
0124 6508 8465 9162 2300 0000 2f01 0001 3301 0000 c701 0000 feff ff00 0000 0000 0000 0000 0000 0000
0124 6508 8465 9162 2300 0000 2f01 0001 3301 0000 c701 0000 feff ff00 0000 0000 0000 0000 0000 0000
0124 6508 8465 9162 2300 0000 2f01 0001 3301 0000 c701 0000 feff ff00 0000 0000 0000 0000 0000 0000
0124 6508 8465 9162 2300 0000 2f01 0001 3301 0000 c701 0000 feff ff00 0000 0000 0000 0000 0000 0000
0124 6508 8465 9162 2300 0000 2f01 0001 3301 0000 c701 0000 feff ff00 0000 0000 0000 0000 0000 0000
0124 6508 8465 9162 2300 0000 2f01 0001 3301 0000 c701 0000 feff ff00 0000 0000 0000 0000 0000 0000
0124 6508 8465 9162 2300 0000 2f01 0001 3301 0000 c701 0000 feff ff00 0000 0000 0000 0000 0000 0000
0124 6508 8465 9162 2300 0000 2f01 0001 3301 0000 c701 0000 feff ff00 0000 0000 0000 0000 0000 0000
0124 6508 8465 9162 2300 0000 2f01 0001 3301 0000 c701 0000 feff ff00 0000 0000 0000 0000 0000 0000
0124 6508 8465 9162 2300 0000 2f01 0001 3301 0000 c701 0000 feff ff00 0000 0000 0000 0000 0000 0000
0124 6508 8465 9162 2300 0000 2f01 0001 3301 0000 c701 0000 feff ff00 0000 0000 0000 0000 0000 0000
0124 6508 8465 9162 2300 0000 2f01 0001 3301 0000 c701 0000 feff ff00 0000 0000 0000 0000 0000 0000
0124 6508 8465 9162 2300 0000 2f01 0001 3301 0000 c701 0000 feff ff00 0000 0000 0000 0000 0000 0000
0124 6508 8465 9162 2300 0000 2f01 0001 3301 0000 c701 0000 feff ff00 0000 0000 0000 0000 0000 0000
0124 6508 8465 9162 2300 0000 2f01 0001 3301 0000 c701 0000 feff ff00 0000 0000 0000 0000 0000 0000
0124 6508 8465 9162 2300 0000 2f01 0001 3301 0000 c701 0000 feff ff00 0000 0000 0000 0000 0000 0000
0124 6508 8465 9162 2300 0000 2f01 0001 3301 0000 c701 0000 feff ff00 0000 0000 0000 0000 0000 0000
0124 6508 8465 9162 2300 0000 2f01 0001 3301 0000 c701 0000 feff ff00 0000 0000 0000 0000 0000 0000
0124 6508 8465 9162 2300 0000 2f01 0001 3301 0000 c701 0000 feff ff00 0000 0000 0000 0000 0000 0000
0124 6508 8465 9162 2300 0000 2f01 0001 3301 0000 c701 0000 feff ff00 0000 0000 0000 0000 0000 0000
0124 6508 8465 9162 2300 0000 2f01 0001 3301 0000 c701 0000 feff ff00 0000 0000 0000 0000 0000 0000
0124 6508 8465 9162 2300 0000 2f01 0001 3301 0000 c701 0000 feff ff00 0000 0000 0000 0000 0000 0000
0124 6508 8465 9162 2300 0000 2f01 0001 3301 0000 c701 0000 feff ff00 0000 0000 0000 0000 0000 0000
0124 6508 8465 9162 2300 0000 2f01 0001 3301 0000 c701 0000 feff ff00 0000 0000 0000 0000 0000 0000


4800 0000 5f00 0000
0124 6508 8465 9162 2300 0000 2f01 0001 3301 0000 c701 0000 feff ff00 0000 0000 0000 0000 0000 0000
0124 6508 8465 9162 2300 0000 2f01 0001 3301 0000 c701 0000 feff ff00 0000 0000 0000 0000 0000 0000 0124 6508 8465 9162 2300 0000 2f01 0001 3301 0000 c701 0000 feff ff00 0000 0000 0000 0000 0000 0000 0124 6508 8465 9162 2300 0000 2f01 0001 3301 0000 c701 0000 feff ff00 0000 0000 0000 0000 0000 0000 0124 6508 8465 9162 2300 0000 2f01 0001 3301 0000 c701 0000 feff ff00 0000 0000 0000 0000 0000 0000 0124 6508 8465 9162 2300 0000 2f01 0001 3301 0000 c701 0000 feff ff00 0000 0000 0000 0000 0000 0000 0124 6508 8465 9162 2300 0000 2f01 0001 3301 0000 c701 0000 feff ff00 0000 0000 0000 0000 0000 0000 0124 6508 8465 9162 2300 0000 2f01 0001 3301 0000 c701 0000 feff ff00 0000 0000 0000 0000 0000 0000 0124 6508 8465 9162 2300 0000 2f01 0001 3301 0000 c701 0000 feff ff00 0000 0000 0000 0000 0000 0000 0124 6508 8465 9162 2300 0000 2f01 0001 3301 0000 c701 0000 feff ff00 0000 0000 0000 0000 0000 0000 0124 6508 8465 9162 2300 0000 2f01 0001 3301 0000 c701 0000 feff ff00 0000 0000 0000 0000 0000 0000 0124 6508 8465 9162 2300 0000 2f01 0001 3301 0000 c701 0000 feff ff00 0000 0000 0000 0000 0000 0000 0124 6508 8465 9162 2300 0000 2f01 0001 3301 0000 c701 0000 feff ff00 0000 0000 0000 0000 0000 0000 0124 6508 8465 9162 2300 0000 2f01 0001 3301 0000 c701 0000 feff ff00 0000 0000 0000 0000 0000 0000 0124 6508 8465 9162 2300 0000 2f01 0001 3301 0000 c701 0000 feff ff00 0000 0000 0000 0000 0000 0000 0124 6508 8465 9162 2300 0000 2f01 0001 3301 0000 c701 0000 feff ff00 0000 0000 0000 0000 0000 0000 0124 6508 8465 9162 2300 0000 2f01 0001 3301 0000 c701 0000 feff ff00 0000 0000 0000 0000 0000 0000 0124 6508 8465 9162 2300 0000 2f01 0001 3301 0000 c701 0000 feff ff00 0000 0000 0000 0000 0000 0000 0124 6508 8465 9162 2300 0000 2f01 0001 3301 0000 c701 0000 feff ff00 0000 0000 0000 0000 0000 0000 0124 6508 8465 9162 2300 0000 2f01 0001 3301 0000 c701 0000 feff ff00 0000 0000 0000 0000 0000 0000 0124 6508 8465 9162 2300 0000 2f01 0001 3301 0000 c701 0000 feff ff00 0000 0000 0000 0000 0000 0000 0124 6508 8465 9162 2300 0000 2f01 0001 3301 0000 c701 0000 feff ff00 0000 0000 0000 0000 0000 0000 0124 6508 8465 9162 2300 0000 2f01 0001 3301 0000 c701 0000 feff ff00 0000 0000 0000 0000 0000 0000 0124 6508 8565 9162 2300 0000 2f01 0001 3301 0000 c701 0000 feff ff00 0000 0000 0000 0000 0000 0000

*/
