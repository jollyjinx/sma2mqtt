import XCTest

import class Foundation.Bundle

@testable import BinaryCoder
@testable import JLog
@testable import sma2mqttLibrary

final class sma2mqttTests: XCTestCase
{
    override func setUp() async throws
    {
        JLog.loglevel = .trace
    }

    func testSMANetDecoding1() throws
    {
        let data = """

        07 2c4a 08 8856 9c64 2e01 0000 6f24 0001 9f24 0000 a024 0000 dd24 0000 634a 0000 feff ff00 0000 0000


        """.hexStringToData()
        let binaryDecoder = BinaryDecoder(data: [UInt8](data))

        let packet = try SMANetPacketValue(fromBinary: binaryDecoder)
        JLog.debug("Packet:\(packet)")
        XCTAssert(binaryDecoder.isAtEnd)
    }

    func testSMANetDecoding2() throws
    {
        let data =
            "0ea0 ffff ffff ffff 0001 1234 25f6 4321 0001 0000 0000 0180 0c04 fdff 0700 0000 8403 0000 4c20 cb51 0000 0000 dbb8 f4e9 fae7 ddfb edfa 8888"
                .hexStringToData()
        let binaryDecoder = BinaryDecoder(data: [UInt8](data))

        let packet = try SMANetPacket(fromBinary: binaryDecoder)
        JLog.debug("Packet:\(packet)")
        XCTAssert(binaryDecoder.isAtEnd)
    }

    func testSMANetDecoding3() throws
    {
        let data = """

            0aa0
            ffff ffff ffff 00
            c5
            6901 6d33 26b3 00
            05
            0000 0000 7ba7 0c00
            fdff
            4c 4f43 4b
            4544 0000
            
            0000 0000

        """
                .hexStringToData()
        let binaryDecoder = BinaryDecoder(data: [UInt8](data))

        let packet = try SMANetPacket(fromBinary: binaryDecoder)
        JLog.debug("Packet:\(packet)")
        XCTAssert(binaryDecoder.isAtEnd)
    }


    func testSMADecoding() throws
    {
        let data =
            "534d4100 0004 02a0 00000001 0046 0010 6065 11 e0 07050102030400a19901f6 a22fb3 0001 0000 0000f1b10102005400000000010000000101260068d50f613b975300000000000122260068d50f61b81f000000000000 0000 0000"
                .hexStringToData()
        let binaryDecoder = BinaryDecoder(data: [UInt8](data))

        let packet = try SMAPacket(fromBinary: binaryDecoder)
        JLog.debug("Packet:\(packet)")
        XCTAssert(binaryDecoder.isAtEnd)

        let packet2 = try SMAPacket(data: data)
        JLog.debug("Packet2:\(packet2)")
    }

    func testSMAPacketGeneration() throws
    {
        let data1 = """

        534d 4100
            0004 02a0
                0000 0001
            0026 0010
            6065
            09
            a0
            ffff ffff ffff 00
            00
            7401 10e7 f0b2 00
            00
            0000
            0000
            60e2 0002 8061 0048 2100 ff4a 4100
        0000 0000

        """

        let dataString = try SMAPacketGenerator.generatePacketForObjectID(packetcounter: 1, objectID: "6180_08414E00")
        let data = dataString.hexStringToData()

        let binaryDecoder = BinaryDecoder(data: [UInt8](data))

        let packet = try SMAPacket(fromBinary: binaryDecoder)
        JLog.debug("Packet:\(packet)")
        XCTAssert(binaryDecoder.isAtEnd)

        let packet2 = try SMAPacket(data: data)
        JLog.debug("Packet2:\(packet2)")
    }

    func testSHMWeird() throws
    {
        let data = """
        534d 4100
        0004 02a0
             0000 0001
        000c 0010
             6081
             0001 0199 b32f a2f6
             ffff
        0000 0000
        """.hexStringToData()
        let binaryDecoder = BinaryDecoder(data: [UInt8](data))

        let packet = try SMAPacket(fromBinary: binaryDecoder)
        JLog.debug("Packet:\(packet)")
        XCTAssert(binaryDecoder.isAtEnd)
    }

    func testSMADiscoveryResponseDecoding() throws
    {
        let data = """
        534d 4100  0004 02a0 0000 0001  0002 0000 0001  0004 0010 0001 0003  0004 0020 0000 0001  0004 0030 0a70 100a  0004 0040 0000 0000  0002 0070 ef0c  0001 0080 00  0000 0000
        534d 4100  0004 02a0 0000 0001  0002 0000 0001  0004 0010 0001 0003  0004 0020 0000 0001  0004 0030 0a70 100d                       0002 0070 ef0c                0000 0000
        534d 4100  0004 02a0 0000 0001  0002 0000 0001  0004 0010 0001 0003  0004 0020 0000 0001  0004 0030 0a70 100e  0004 0040 0000 0000  0002 0070 ef0c  0001 0080 00  0000 0000
        534d 4100  0004 02a0 0000 0001  0002 0000 0001  0004 0010 0001 0003  0004 0020 0000 0001  0004 0030 0a70 100f  0004 0040 0000 0000  0002 0070 ef0c  0001 0080 00  0000 0000
        """.hexStringToData()
        let binaryDecoder = BinaryDecoder(data: [UInt8](data))

        do
        {
            while !binaryDecoder.isAtEnd
            {
                let packet = try SMAPacket(fromBinary: binaryDecoder)
                JLog.debug("Packet:\(packet.json)")
            }
        }
        catch
        {
            XCTFail("Could not read SMA Packets error:\(error)")
        }
        XCTAssert(binaryDecoder.isAtEnd)
    }

    func testSMAFile() throws
    {
        JLog.debug("loading data")
        let filedata = try Data(contentsOf: URL(fileURLWithPath: "/Users/jolly/Documents/GitHub/sma2mqtt/Temp/Reverseengineering/pcaps/vlan2.20220618-1.pcap"), options: .mappedRead)
//                let filedata = try Data(contentsOf: URL(fileURLWithPath:"/Users/jolly/Downloads/FW3-11-11-R_SBS25-1VL-10/SBS2.5-1VL-10-V3.11.11.R.up2"),options:.mappedRead)
//        let filedata = try Data(contentsOf: URL(fileURLWithPath:"/Users/jolly/Documents/GitHub/sma2mqtt/Temp/Reverseengineering/shm.20220615.pcap"),options: .mappedRead)
        JLog.debug("data loaded")

        let separator = Data([0x53, 0x4D, 0x41, 0x00])
        var splitter = DataSplitter(data: filedata, splitData: separator)

        JLog.debug("splitter instanciated")

        JLog.loglevel = .error // too much output otherwise
        var goodcounter = 0
        var badcounter = 0

        var position = 0
        let binaryDecoder = BinaryDecoder(data: [UInt8](filedata))

        while position < (filedata.count - separator.count)
        {
            let chunk = filedata[position ..< position + separator.count]

            if chunk == separator
            {
                //                print("position: \(position)")

                binaryDecoder.position = position // let bigChunk = filedata[position..<filedata.count] // position + 2000]

                do
                {
                    let packet = try SMAPacket(fromBinary: binaryDecoder)

                    goodcounter += 1
                    position = binaryDecoder.position
                    JLog.debug("Packet \(goodcounter):\(packet)")
                }
                catch
                {
                    badcounter += 1
                    position += 1

                    JLog.error("Packet \(goodcounter): got error: \(error) data:\(chunk.hexDump)")
                }
                if (goodcounter + badcounter) % 1000 == 0
                {
                    print("Good:\(goodcounter)  Bad:\(badcounter)")
                }
            }
            else
            {
                position += 1
            }
        }

        goodcounter = 0
        badcounter = 0

        while let chunk = splitter.next()
        {
            let binaryDecoder = BinaryDecoder(data: [UInt8](chunk))

            do
            {
                let packet = try SMAPacket(fromBinary: binaryDecoder)
                goodcounter += 1

                JLog.debug("Packet \(goodcounter):\(packet)")
            }
            catch
            {
                badcounter += 1

                JLog.error("Packet \(goodcounter): got error: \(error) data:\(chunk.hexDump)")
            }
            if (goodcounter + badcounter) % 1000 == 0
            {
                print("Good:\(goodcounter)  Bad:\(badcounter)")
            }
        }

        XCTAssert(true)
    }

    func testSMAPacketDecoding1() throws
    {
        let data = """
        534d 4100 0004 02a0 0000 0001 03e6 0010 6065
        f9a0 1234 e419 4321 00a1 9901 f6a2 2fb3 0001 0000 0300 5804 0102 8051
        1800 0000 2f00 0000
        01aa 4a08 d6df 9462 3301 0001 b706 0000 feff ff00 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000
        01b7 4a10 02e0 9462 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000
        01b8 4a10 02e0 9462 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000
        01b9 4a10 02e0 9462 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000
        01ba 4a10 02e0 9462 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 01bb 4a08 02e0 9462 260d 0001 270d 0000 280d 0000 290d 0000 feff ff00 0000 0000 0000 0000 0000 0000 01bc 4a08 03e0 9462 2f01 0001 3301 0000 bd06 0000 5208 0000 fd0c 0000 620d 0000 feff ff00 0000 0000 011e 4b08 03e0 9462 2f01 0001 3301 0000 b706 0000 bd06 0000 f007 0000 f107 0000 f207 0000 f707 0000 011e 4b08 03e0 9462 2508 0000 5208 0000 6c08 0000 feff ff00 0000 0000 0000 0000 0000 0000 0000 0000 0127 5200 03e0 9462 0000 0000 0000 0000 321e 0000 321e 0000 a00f 0000 a00f 0000 ffff ffff ffff ffff 0128 5240 03e0 9462 0000 0000 0000 0000 321e 0000 321e 0000 0000 0080 0000 0080 0000 0080 0000 0080 0129 5200 03e0 9462 0000 0000 0000 0000 1027 0000 1027 0000 ffff ffff ffff ffff ffff ffff ffff ffff 012a 5208 03e0 9462 1104 0000 1204 0000 fdff ff01 feff ff00 0000 0000 0000 0000 0000 0000 0000 0000 012f 5208 03e0 9462 2f01 0000 3401 0001 2203 0000 1f0d 0000 fdff ff00 feff ff00 0000 0000 0000 0000 0124 6508 8465 9162 2300 0000 2f01 0001 3301 0000 c701 0000 feff ff00 0000 0000 0000 0000 0000 0000 0124 6508 8465 9162 2300 0000 2f01 0001 3301 0000 c701 0000 feff ff00 0000 0000 0000 0000 0000 0000 0124 6508 8465 9162 2300 0000 2f01 0001 3301 0000 c701 0000 feff ff00 0000 0000 0000 0000 0000 0000 0124 6508 8465 9162 2300 0000 2f01 0001 3301 0000 c701 0000 feff ff00 0000 0000 0000 0000 0000 0000 0124 6508 8465 9162 2300 0000 2f01 0001 3301 0000 c701 0000 feff ff00 0000 0000 0000 0000 0000 0000 0124 6508 8465 9162 2300 0000 2f01 0001 3301 0000 c701 0000 feff ff00 0000 0000 0000 0000 0000 0000 0124 6508 8465 9162 2300 0000 2f01 0001 3301 0000 c701 0000 feff ff00 0000 0000 0000 0000 0000 0000 0124 6508 8465 9162 2300 0000 2f01 0001 3301 0000 c701 0000 feff ff00 0000 0000 0000 0000 0000 0000 0124 6508 8465 9162 2300 0000 2f01 0001 3301 0000 c701 0000 feff ff00 0000 0000 0000 0000 0000 0000 0124 6508 8465 9162 2300 0000 2f01 0001 3301 0000 c701 0000 feff ff00 0000 0000 0000 0000 0000 0000 0000 0000
        """.hexStringToData()
        let binaryDecoder = BinaryDecoder(data: [UInt8](data))
        let _ = try? SMAPacket(fromBinary: binaryDecoder)
    }

    func testSMAPacketDecoding2() throws
    {
        let data1 = """
        534d 4100 0004 02a0 0000 0001 03fa 0010 6065 fea0 1234 e419 4321 00a1 9901 f6a2 2fb3 0001 0000 0a00 5684 0102 0051
        0000 0000 2200 0000 013f
        2640 03e0 9462 f801 0000 f801 0000 f801 0000 f801 0000 0100 0000
        011e 4100 fddf 9462 a00f 0000 a00f 0000 a00f 0000 a00f 0000 0100
        0000 011f 4100 fddf 9462 0000 0000 0000 0000 0000 0000 0000 0000
        0000 0000 0120 4100 fddf 9462 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0166 4100 fddf 9462 ffff ffff ffff ffff ffff ffff ffff ffff 0100 0000 0180 4100 fddf 9462 ffff ffff ffff ffff ffff ffff ffff ffff 0100 0000 0136 4640 03e0 9462 4002 0000 4002 0000 4002 0000 4002 0000 0100 0000 0137 4640 03e0 9462 0000 0000 0000 0000 0000 0000 0000 0000 0100 0000 0140 4640 03e0 9462 0000 0080 0000 0080 0000 0080 0000 0080 0100 0000 0141 4640 03e0 9462 f801 0000 f801 0000 f801 0000 f801 0000 0100 0000 0142 4640 03e0 9462 0000 0080 0000 0080 0000 0080 0000 0080 0100 0000 0148 4600 03e0 9462 ffff ffff ffff ffff ffff ffff ffff ffff 0100 0000 0149 4600 03e0 9462 1d5c 0000 1d5c 0000 1d5c 0000 1d5c 0000 0100 0000 014a 4600 03e0 9462 ffff ffff ffff ffff ffff ffff ffff ffff 0100 0000 014b 4600 03e0 9462 ffff ffff ffff ffff ffff ffff ffff ffff 0100 0000 014c 4600 03e0 9462 ffff ffff ffff ffff ffff ffff ffff ffff 0100 0000 014d 4600 03e0 9462 ffff ffff ffff ffff ffff ffff ffff ffff 0100 0000 014e 4600 03e0 9462 6100 0000 6100 0000 6100 0000 6100 0000 0100 0000 0153 4640 03e0 9462 0000 0080 0000 0080 0000 0080 0000 0080 0100 0000 0154 4640 03e0 9462 d608 0000 d608 0000 d608 0000 d608 0000 0100 0000 0155 4640 03e0 9462 0000 0080 0000 0080 0000 0080 0000 0080 0100 0000 0157 4600 03e0 9462 8613 0000 8613 0000 8613 0000 8613 0000 0100 0000 0165 4640 03e0 9462 0f05 0000 0f05 0000 0f05 0000 0f05 0000 0100 0000 0166 4640 03e0 9462 cc07 0000 cc07 0000 cc07 0000 cc07 0000 0100 0000 016b 4640 03e0 9462 9103 0000 9103 0000 9103 0000 9103 0000 0100 0000 016c 4640 03e0 9462 2c01 0000 2c01 0000 2c01 0000 2c01 0000 0100 0000 016d 4640 03e0 9462 b601 0000 b601 0000 b601 0000 b601 0000 0100 0000 016e 4640 03e0 9462 ba00 0000 ba00 0000 ba00 0000 ba00 0000 0100 0000 0177 4600 03e0 9462 ffff ffff ffff ffff ffff ffff ffff ffff 0100 0000 0178 4600 03e0 9462 ffff ffff ffff ffff ffff ffff ffff ffff 0100 0000 0179 4600 03e0 9462 ffff ffff ffff ffff ffff ffff ffff ffff 0100 0000 0181 4600 03e0 9462 8513 0000 8513 0000 8513 0000 8513 0000 0100 0000 018f 4640 03e0 9462 5002 0000 5002 0000 5002 0000 5002 0000 0100 0000 0199 4640 03e0 9462 0000 0080 0000 0080 0000 0080 0000 0080 0100 0000 01c2 4600 03e0 9462 f801 0000 f801 0000 f801 0000 f801 0000 0100 0000 0000 0000
        """.hexStringToData()

        let binaryDecoder1 = BinaryDecoder(data: [UInt8](data1))
        let _ = try? SMAPacket(fromBinary: binaryDecoder1)
    }

    func testSMAPacketDecoding3() throws
    {
        JLog.loglevel = .trace
        let data1 = """

        534d 4100 0004 02a0 0000 0001 03fa 0010 6065
        fea0 1234 25f6 4321 00a1 9901 f6a2 2fb3 0001 0000 0900 4604 0102 0051
        2300 0000 4500 0000
        01e5 4600 40d5 9462 275c 0000 275c 0000 275c 0000 275c 0000 0100 0000
        01e6 4600 40d5 9462 305c 0000 305c 0000 305c 0000 305c 0000 0100 0000
        01e7 4600 40d5 9462 175c 0000 175c 0000 175c 0000 175c 0000 0100 0000
        01e8 4600 40d5 9462 5e02 0000 5e02 0000 5e02 0000 5e02 0000 0100 0000
        01e9 4600 40d5 9462 6a03 0000 6a03 0000 6a03 0000 6a03 0000 0100 0000 01ea 4600 40d5 9462 0000 0000 0000 0000 0000 0000 0000 0000 0100 0000 01eb 4600 40d5 9462 0000 0000 0000 0000 0000 0000 0000 0000 0100 0000 01ec 4600 40d5 9462 0000 0000 0000 0000 0000 0000 0000 0000 0100 0000 01ed 4600 40d5 9462 a000 0000 a000 0000 a000 0000 a000 0000 0100 0000 01ee 4640 40d5 9462 0600 0000 0600 0000 0600 0000 0600 0000 0100 0000 01ef 4640 40d5 9462 2300 0000 2300 0000 2300 0000 2300 0000 0100 0000 01f0 4640 40d5 9462 5d00 0000 5d00 0000 5d00 0000 5d00 0000 0100 0000 01f1 4640 40d5 9462 8600 0000 8600 0000 8600 0000 8600 0000 0100 0000 01b6 4a00 37d5 9462 0000 0000 0000 0000 0000 0000 0000 0000 0100 0000 011f 5740 0000 0000 0000 0080 0000 0080 0000 0080 0000 0080 0100 0000 0128 6540 0000 0000 0000 0080 0000 0080 0000 0080 0000 0080 0100 0000 0128 6540 0000 0000 0000 0080 0000 0080 0000 0080 0000 0080 0100 0000 0128 6540 0000 0000 0000 0080 0000 0080 0000 0080 0000 0080 0100 0000 0128 6540 0000 0000 0000 0080 0000 0080 0000 0080 0000 0080 0100 0000 0128 6540 0000 0000 0000 0080 0000 0080 0000 0080 0000 0080 0100 0000 0128 6540 0000 0000 0000 0080 0000 0080 0000 0080 0000 0080 0100 0000 0128 6540 0000 0000 0000 0080 0000 0080 0000 0080 0000 0080 0100 0000 0128 6540 0000 0000 0000 0080 0000 0080 0000 0080 0000 0080 0100 0000 0128 6540 0000 0000 0000 0080 0000 0080 0000 0080 0000 0080 0100 0000 0128 6540 0000 0000 0000 0080 0000 0080 0000 0080 0000 0080 0100 0000 0128 6540 0000 0000 0000 0080 0000 0080 0000 0080 0000 0080 0100 0000 0128 6540 0000 0000 0000 0080 0000 0080 0000 0080 0000 0080 0100 0000 0128 6540 0000 0000 0000 0080 0000 0080 0000 0080 0000 0080 0100 0000 0128 6540 0000 0000 0000 0080 0000 0080 0000 0080 0000 0080 0100 0000 0128 6540 0000 0000 0000 0080 0000 0080 0000 0080 0000 0080 0100 0000 0128 6540 0000 0000 0000 0080 0000 0080 0000 0080 0000 0080 0100 0000 0128 6540 0000 0000 0000 0080 0000 0080 0000 0080 0000 0080 0100 0000 0128 6540 0000 0000 0000 0080 0000 0080 0000 0080 0000 0080 0100 0000 0128 6540 0000 0000 0000 0080 0000 0080 0000 0080 0000 0080 0100 0000 0128 6540 0000 0000 0000 0080 0000 0080 0000 0080 0000 0080 0100 0000 0000 0000
        """.hexStringToData()
        let binaryDecoder1 = BinaryDecoder(data: [UInt8](data1))
        let _ = try? SMAPacket(fromBinary: binaryDecoder1)
    }

    func testSMAPacketDecoding4() throws
    {
        JLog.loglevel = .trace
        let data1 = """

        534d 4100 0004 02a0 0000 0001 03fa 0010 6065
        fea0 1234 25f6 4321 00a1 9901 f6a2 2fb3 0001 0000 0a00 4684 0102 0051
        0000 0000 2200 0000
        013f 2640 40d5 9462 ad03 0000 ad03 0000 ad03 0000 ad03 0000 0100 0000
        011e 4100 3fd5 9462 a00f 0000 a00f 0000 a00f 0000 a00f 0000 0100 0000
        011f 4100 3fd5 9462 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000
        0120 4100 3fd5 9462 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000
        0166 4100 3fd5 9462 ffff ffff ffff ffff ffff ffff ffff ffff 0100 0000
        0180 4100 3fd5 9462 ffff ffff ffff ffff ffff ffff ffff ffff 0100 0000 0136 4640 40d5 9462 2805 0000 2805 0000 2805 0000 2805 0000 0100 0000 0137 4640 40d5 9462 0000 0000 0000 0000 0000 0000 0000 0000 0100 0000 0140 4640 40d5 9462 0000 0080 0000 0080 0000 0080 0000 0080 0100 0000 0141 4640 40d5 9462 ad03 0000 ad03 0000 ad03 0000 ad03 0000 0100 0000 0142 4640 40d5 9462 0000 0080 0000 0080 0000 0080 0000 0080 0100 0000 0148 4600 40d5 9462 ffff ffff ffff ffff ffff ffff ffff ffff 0100 0000 0149 4600 40d5 9462 275c 0000 275c 0000 275c 0000 275c 0000 0100 0000 014a 4600 40d5 9462 ffff ffff ffff ffff ffff ffff ffff ffff 0100 0000 014b 4600 40d5 9462 ffff ffff ffff ffff ffff ffff ffff ffff 0100 0000 014c 4600 40d5 9462 ffff ffff ffff ffff ffff ffff ffff ffff 0100 0000 014d 4600 40d5 9462 ffff ffff ffff ffff ffff ffff ffff ffff 0100 0000 014e 4600 40d5 9462 6300 0000 6300 0000 6300 0000 6300 0000 0100 0000 0153 4640 40d5 9462 0000 0080 0000 0080 0000 0080 0000 0080 0100 0000 0154 4640 40d5 9462 f90f 0000 f90f 0000 f90f 0000 f90f 0000 0100 0000 0155 4640 40d5 9462 0000 0080 0000 0080 0000 0080 0000 0080 0100 0000 0157 4600 40d5 9462 8513 0000 8513 0000 8513 0000 8513 0000 0100 0000 0165 4640 40d5 9462 1a0a 0000 1a0a 0000 1a0a 0000 1a0a 0000 0100 0000 0166 4640 40d5 9462 df0e 0000 df0e 0000 df0e 0000 df0e 0000 0100 0000 016b 4640 40d5 9462 8b03 0000 8b03 0000 8b03 0000 8b03 0000 0100 0000 016c 4640 40d5 9462 5e02 0000 5e02 0000 5e02 0000 5e02 0000 0100 0000 016d 4640 40d5 9462 6b03 0000 6b03 0000 6b03 0000 6b03 0000 0100 0000 016e 4640 40d5 9462 b900 0000 b900 0000 b900 0000 b900 0000 0100 0000 0177 4600 40d5 9462 ffff ffff ffff ffff ffff ffff ffff ffff 0100 0000 0178 4600 40d5 9462 ffff ffff ffff ffff ffff ffff ffff ffff 0100 0000 0179 4600 40d5 9462 ffff ffff ffff ffff ffff ffff ffff ffff 0100 0000 0181 4600 40d5 9462 8513 0000 8513 0000 8513 0000 8513 0000 0100 0000 018f 4640 40d5 9462 2f05 0000 2f05 0000 2f05 0000 2f05 0000 0100 0000 0199 4640 40d5 9462 0000 0080 0000 0080 0000 0080 0000 0080 0100 0000 01c2 4600 40d5 9462 ad03 0000 ad03 0000 ad03 0000 ad03 0000 0100 0000 0000 0000
        """.hexStringToData()
        let binaryDecoder1 = BinaryDecoder(data: [UInt8](data1))
        let _ = try? SMAPacket(fromBinary: binaryDecoder1)
    }

    func testSMAPacketDecoding5() throws
    {
        JLog.loglevel = .trace
        let data1 = """
        534d 4100 0004 02a0 0000 0001 03fa 0010 6065
        fe a0 123425f64321 00a1 9901f6a22fb3  0001 0000 0a00 4284 0102 0051
        0000 0000 2200 0000
        013f 2640 3fd5 9462 a903 0000 a903 0000 a903 0000 a903 0000 0100 0000
        011e 4100 3fd5 9462 a00f 0000 a00f 0000 a00f 0000 a00f 0000 0100 0000
        011f 4100 3fd5 9462 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000
        0120 4100 3fd5 9462 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0166 4100 3fd5 9462 ffff ffff ffff ffff ffff ffff ffff ffff 0100 0000 0180 4100 3fd5 9462 ffff ffff ffff ffff ffff ffff ffff ffff 0100 0000 0136 4640 3fd5 9462 2405 0000 2405 0000 2405 0000 2405 0000 0100 0000 0137 4640 3fd5 9462 0000 0000 0000 0000 0000 0000 0000 0000 0100 0000 0140 4640 3fd5 9462 0000 0080 0000 0080 0000 0080 0000 0080 0100 0000 0141 4640 3fd5 9462 a903 0000 a903 0000 a903 0000 a903 0000 0100 0000 0142 4640 3fd5 9462 0000 0080 0000 0080 0000 0080 0000 0080 0100 0000 0148 4600 3fd5 9462 ffff ffff ffff ffff ffff ffff ffff ffff 0100 0000 0149 4600 3fd5 9462 255c 0000 255c 0000 255c 0000 255c 0000 0100 0000 014a 4600 3fd5 9462 ffff ffff ffff ffff ffff ffff ffff ffff 0100 0000 014b 4600 3fd5 9462 ffff ffff ffff ffff ffff ffff ffff ffff 0100 0000 014c 4600 3fd5 9462 ffff ffff ffff ffff ffff ffff ffff ffff 0100 0000 014d 4600 3fd5 9462 ffff ffff ffff ffff ffff ffff ffff ffff 0100 0000 014e 4600 3fd5 9462 6300 0000 6300 0000 6300 0000 6300 0000 0100 0000 0153 4640 3fd5 9462 0000 0080 0000 0080 0000 0080 0000 0080 0100 0000 0154 4640 3fd5 9462 e30f 0000 e30f 0000 e30f 0000 e30f 0000 0100 0000 0155 4640 3fd5 9462 0000 0080 0000 0080 0000 0080 0000 0080 0100 0000 0157 4600 3fd5 9462 8513 0000 8513 0000 8513 0000 8513 0000 0100 0000 0165 4640 3fd5 9462 1b0a 0000 1b0a 0000 1b0a 0000 1b0a 0000 0100 0000 0166 4640 3fd5 9462 cf0e 0000 cf0e 0000 cf0e 0000 cf0e 0000 0100 0000 016b 4640 3fd5 9462 8603 0000 8603 0000 8603 0000 8603 0000 0100 0000 016c 4640 3fd5 9462 5e02 0000 5e02 0000 5e02 0000 5e02 0000 0100 0000 016d 4640 3fd5 9462 6603 0000 6603 0000 6603 0000 6603 0000 0100 0000 016e 4640 3fd5 9462 b800 0000 b800 0000 b800 0000 b800 0000 0100 0000 0177 4600 3fd5 9462 ffff ffff ffff ffff ffff ffff ffff ffff 0100 0000 0178 4600 3fd5 9462 ffff ffff ffff ffff ffff ffff ffff ffff 0100 0000 0179 4600 3fd5 9462 ffff ffff ffff ffff ffff ffff ffff ffff 0100 0000 0181 4600 3fd5 9462 8513 0000 8513 0000 8513 0000 8513 0000 0100 0000 018f 4640 3fd5 9462 2b05 0000 2b05 0000 2b05 0000 2b05 0000 0100 0000 0199 4640 3fd5 9462 0000 0080 0000 0080 0000 0080 0000 0080 0100 0000 01c2 4600 3fd5 9462 a903 0000 a903 0000 a903 0000 a903 0000 0100 0000 0000 0000
        """.hexStringToData()
        let binaryDecoder1 = BinaryDecoder(data: [UInt8](data1))
        let _ = try? SMAPacket(fromBinary: binaryDecoder1)
    }

    func testSMAPacketDecoding6() throws
    {
        JLog.loglevel = .trace
        let data1 = """

        534d 4100 0004 02a0 0000 0001 03e6 0010 6065
        f9 a0 123457374321 00a1 9901f6a22fb3  0001 0000 0400 3480 0102 8051
        0000 0000 1700 0000
        0148 2108 747e a162 3301 0001 feff ff00 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000
        0128 4108 747e a162 2701 0001 7d01 0000 bb01 0000 7005 0000 7105 0000 bb05 0000 bd05 0000 c805 0000
        0128 4108 747e a162 3f07 0000 4708 0000 fdff ff00 feff ff00 0000 0000 0000 0000 0000 0000 0000 0000
        0129 4108 737e a162 2e01 0001 6b0c 0000 6c0c 0000 6d0c 0000 6e0c 0000 feff ff00 0000 0000 0000 0000
        0132 4108 747e a162 2f01 0000 3401 0001 2203 0000 fdff ff00 feff ff00 0000 0000 0000 0000 0000 0000
        0133 4108 747e a162 2f01 0000 3401 0001 2203 0000 fdff ff00 feff ff00 0000 0000 0000 0000 0000 0000
        0149 4108 6b7e a162 7603 0001 feff ff00 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000
        014a 4108 6b7e a162 5001 0000 5101 0000 5201 0000 7703 0001 feff ff00 0000 0000 0000 0000 0000 0000
        014b 4108 6b7e a162 7503 0001 feff ff00 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000
        014c 4108 6b7e a162 2300 0000 2f01 0000 3301 0001 c701 0000 feff ff00 0000 0000 0000 0000 0000 0000
        0164 4108 747e a162 3300 0001 3701 0000 fdff ff00 feff ff00 0000 0000 0000 0000 0000 0000 0000 0000
        0165 4108 747e a162 2d02 0000 7403 0001 a906 0000 c00d 0000 fdff ff00 feff ff00 0000 0000 0000 0000
        0168 4308 747e a162 a005 0001 a105 0000 fdff ff00 feff ff00 0000 0000 0000 0000 0000 0000 0000 0000
        015a 4608 747e a162 1104 0001 1204 0000 fdff ff00 feff ff00 0000 0000 0000 0000 0000 0000 0000 0000
        01a6 4608 747e a162 f306 0000 f406 0001 f506 0000 fdff ff00 feff ff00 0000 0000 0000 0000 0000 0000
        012c 4a08 447e a162 2e01 0000 6f24 0001 9f24 0000 a024 0000 dd24 0000 634a 0000 feff ff00 0000 0000
        012e 4a08 249c 9a62 2e01 0001 3301 0000 b706 0000 feff ff00 0000 0000 0000 0000 0000 0000 0000 0000
        0164 4a08 6c7e a162 2f01 0001 3301 0000 620d 0000 feff ff00 0000 0000 0000 0000 0000 0000 0000 0000
        0196 4a08 6e7e a162 2300 0000 3301 0001 c701 0000 bd06 0000 feff ff00 0000 0000 0000 0000 0000 0000
        0197 4a08 6e7e a162 2e01 0000 b806 0000 b906 0001 feff ff00 0000 0000 0000 0000 0000 0000 0000 0000
        019a 4a10 727e a162 3130 2e31 3132 2e31 362e 3132 3700 0000 0000 0000 0000 0000 0000 0000 0000 0000
        019b 4a10 727e a162 3235 352e 3235 352e 3235 352e 3000 0000 0000 0000 0000 0000 0000 0000 0000 0000
        019c 4a10 727e a162 3130 2e31 3132 2e31 362e 3100 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000
        019d 4a10 727e a162 3130 2e31 3132 2e31 362e 3100 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000
        0000 0000


        534d 4100 0004 02a0 0000 0001 03e6 0010 6065
        f9a0 1234 5737 4321 00a1 9901 f6a2 2fb3 0001 0000 0300 3400 0102 8051
        1800 0000 2f00 0000
        01aa 4a08 547e a162 3301 0001 b706 0000 feff ff00 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000
        01b7 4a10 6c7e a162 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000
        01b8 4a10 6c7e a162 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000
        01b9 4a10 6c7e a162 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000
        01ba 4a10 6c7e a162 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000 0000
        01bb 4a08 6c7e a162 260d 0001 270d 0000 280d 0000 290d 0000 feff ff00 0000 0000 0000 0000 0000 0000
        01bc 4a08 727e a162 2f01 0001 3301 0000 bd06 0000 5208 0000 fd0c 0000 620d 0000 feff ff00 0000 0000
        011e 4b08 747e a162 2f01 0001 3301 0000 b706 0000 bd06 0000 f007 0000 f107 0000 f207 0000 f707 0000
        011e 4b08 747e a162 2508 0000 5208 0000 6c08 0000 feff ff00 0000 0000 0000 0000 0000 0000 0000 0000
        0127 5200 747e a162 0000 0000 0000 0000 321e 0000 321e 0000 a00f 0000 a00f 0000 ffff ffff ffff ffff
        0128 5240 747e a162 0000 0000 0000 0000 321e 0000 321e 0000 0000 0080 0000 0080 0000 0080 0000 0080
        0129 5200 747e a162 0000 0000 0000 0000 1027 0000 1027 0000 ffff ffff ffff ffff ffff ffff ffff ffff
        012a 5208 747e a162 1104 0000 1204 0000 fdff ff01 feff ff00 0000 0000 0000 0000 0000 0000 0000 0000
        012f 5208 747e a162 2f01 0000 3401 0001 2203 0000 1f0d 0000 fdff ff00 feff ff00 0000 0000 0000 0000
        0124 6508 249c 9a62 2300 0000 2f01 0001 3301 0000 c701 0000 feff ff00 0000 0000 0000 0000 0000 0000
        0124 6508 249c 9a62 2300 0000 2f01 0001 3301 0000 c701 0000 feff ff00 0000 0000 0000 0000 0000 0000
        0124 6508 249c 9a62 2300 0000 2f01 0001 3301 0000 c701 0000 feff ff00 0000 0000 0000 0000 0000 0000
        0124 6508 249c 9a62 2300 0000 2f01 0001 3301 0000 c701 0000 feff ff00 0000 0000 0000 0000 0000 0000
        0124 6508 249c 9a62 2300 0000 2f01 0001 3301 0000 c701 0000 feff ff00 0000 0000 0000 0000 0000 0000
        0124 6508 249c 9a62 2300 0000 2f01 0001 3301 0000 c701 0000 feff ff00 0000 0000 0000 0000 0000 0000
        0124 6508 249c 9a62 2300 0000 2f01 0001 3301 0000 c701 0000 feff ff00 0000 0000 0000 0000 0000 0000
        0124 6508 249c 9a62 2300 0000 2f01 0001 3301 0000 c701 0000 feff ff00 0000 0000 0000 0000 0000 0000
        0124 6508 249c 9a62 2300 0000 2f01 0001 3301 0000 c701 0000 feff ff00 0000 0000 0000 0000 0000 0000
        0124 6508 249c 9a62 2300 0000 2f01 0001 3301 0000 c701 0000 feff ff00 0000 0000 0000 0000 0000 0000
        0000 0000


        534d 4100 0004 02a0 0000 0001 03e6 0010 6065
        f9a0 1234 5737 4321 00a1 9901 f6a2 2fb3 0001 0000 0200 3400 0102 8051
        3000 0000 4700 0000
        0124 6508 249c 9a62 2300 0000 2f01 0001 3301 0000 c701 0000 feff ff00 0000 0000 0000 0000 0000 0000
        0124 6508 249c 9a62 2300 0000 2f01 0001 3301 0000 c701 0000 feff ff00 0000 0000 0000 0000 0000 0000
        0124 6508 249c 9a62 2300 0000 2f01 0001 3301 0000 c701 0000 feff ff00 0000 0000 0000 0000 0000 0000
        0124 6508 249c 9a62 2300 0000 2f01 0001 3301 0000 c701 0000 feff ff00 0000 0000 0000 0000 0000 0000 0124 6508 249c 9a62 2300 0000 2f01 0001 3301 0000 c701 0000 feff ff00 0000 0000 0000 0000 0000 0000 0124 6508 249c 9a62 2300 0000 2f01 0001 3301 0000 c701 0000 feff ff00 0000 0000 0000 0000 0000 0000 0124 6508 249c 9a62 2300 0000 2f01 0001 3301 0000 c701 0000 feff ff00 0000 0000 0000 0000 0000 0000 0124 6508 249c 9a62 2300 0000 2f01 0001 3301 0000 c701 0000 feff ff00 0000 0000 0000 0000 0000 0000 0124 6508 249c 9a62 2300 0000 2f01 0001 3301 0000 c701 0000 feff ff00 0000 0000 0000 0000 0000 0000 0124 6508 249c 9a62 2300 0000 2f01 0001 3301 0000 c701 0000 feff ff00 0000 0000 0000 0000 0000 0000 0124 6508 249c 9a62 2300 0000 2f01 0001 3301 0000 c701 0000 feff ff00 0000 0000 0000 0000 0000 0000 0124 6508 249c 9a62 2300 0000 2f01 0001 3301 0000 c701 0000 feff ff00 0000 0000 0000 0000 0000 0000 0124 6508 249c 9a62 2300 0000 2f01 0001 3301 0000 c701 0000 feff ff00 0000 0000 0000 0000 0000 0000 0124 6508 249c 9a62 2300 0000 2f01 0001 3301 0000 c701 0000 feff ff00 0000 0000 0000 0000 0000 0000 0124 6508 249c 9a62 2300 0000 2f01 0001 3301 0000 c701 0000 feff ff00 0000 0000 0000 0000 0000 0000 0124 6508 249c 9a62 2300 0000 2f01 0001 3301 0000 c701 0000 feff ff00 0000 0000 0000 0000 0000 0000 0124 6508 249c 9a62 2300 0000 2f01 0001 3301 0000 c701 0000 feff ff00 0000 0000 0000 0000 0000 0000 0124 6508 249c 9a62 2300 0000 2f01 0001 3301 0000 c701 0000 feff ff00 0000 0000 0000 0000 0000 0000 0124 6508 249c 9a62 2300 0000 2f01 0001 3301 0000 c701 0000 feff ff00 0000 0000 0000 0000 0000 0000 0124 6508 249c 9a62 2300 0000 2f01 0001 3301 0000 c701 0000 feff ff00 0000 0000 0000 0000 0000 0000 0124 6508 249c 9a62 2300 0000 2f01 0001 3301 0000 c701 0000 feff ff00 0000 0000 0000 0000 0000 0000 0124 6508 249c 9a62 2300 0000 2f01 0001 3301 0000 c701 0000 feff ff00 0000 0000 0000 0000 0000 0000 0124 6508 249c 9a62 2300 0000 2f01 0001 3301 0000 c701 0000 feff ff00 0000 0000 0000 0000 0000 0000 0124 6508 249c 9a62 2300 0000 2f01 0001 3301 0000 c701 0000 feff ff00 0000 0000 0000 0000 0000 0000 0000 0000

        534d 4100 0004 02a0 0000 0001 03e6 0010 6065
        f9a0 1234 5737 4321 00a1 9901 f6a2 2fb3 0001 0000 0100 3400 0102 8051
        4800 0000 5f00 0000
        0124 6508 249c 9a62 2300 0000 2f01 0001 3301 0000 c701 0000 feff ff00 0000 0000 0000 0000 0000 0000
        0124 6508 249c 9a62 2300 0000 2f01 0001 3301 0000 c701 0000 feff ff00 0000 0000 0000 0000 0000 0000
        0124 6508 249c 9a62 2300 0000 2f01 0001 3301 0000 c701 0000 feff ff00 0000 0000 0000 0000 0000 0000
        0124 6508 249c 9a62 2300 0000 2f01 0001 3301 0000 c701 0000 feff ff00 0000 0000 0000 0000 0000 0000 0124 6508 249c 9a62 2300 0000 2f01 0001 3301 0000 c701 0000 feff ff00 0000 0000 0000 0000 0000 0000 0124 6508 249c 9a62 2300 0000 2f01 0001 3301 0000 c701 0000 feff ff00 0000 0000 0000 0000 0000 0000 0124 6508 249c 9a62 2300 0000 2f01 0001 3301 0000 c701 0000 feff ff00 0000 0000 0000 0000 0000 0000 0124 6508 249c 9a62 2300 0000 2f01 0001 3301 0000 c701 0000 feff ff00 0000 0000 0000 0000 0000 0000 0124 6508 249c 9a62 2300 0000 2f01 0001 3301 0000 c701 0000 feff ff00 0000 0000 0000 0000 0000 0000 0124 6508 249c 9a62 2300 0000 2f01 0001 3301 0000 c701 0000 feff ff00 0000 0000 0000 0000 0000 0000 0124 6508 249c 9a62 2300 0000 2f01 0001 3301 0000 c701 0000 feff ff00 0000 0000 0000 0000 0000 0000 0124 6508 249c 9a62 2300 0000 2f01 0001 3301 0000 c701 0000 feff ff00 0000 0000 0000 0000 0000 0000 0124 6508 249c 9a62 2300 0000 2f01 0001 3301 0000 c701 0000 feff ff00 0000 0000 0000 0000 0000 0000 0124 6508 249c 9a62 2300 0000 2f01 0001 3301 0000 c701 0000 feff ff00 0000 0000 0000 0000 0000 0000 0124 6508 249c 9a62 2300 0000 2f01 0001 3301 0000 c701 0000 feff ff00 0000 0000 0000 0000 0000 0000 0124 6508 249c 9a62 2300 0000 2f01 0001 3301 0000 c701 0000 feff ff00 0000 0000 0000 0000 0000 0000 0124 6508 249c 9a62 2300 0000 2f01 0001 3301 0000 c701 0000 feff ff00 0000 0000 0000 0000 0000 0000 0124 6508 249c 9a62 2300 0000 2f01 0001 3301 0000 c701 0000 feff ff00 0000 0000 0000 0000 0000 0000 0124 6508 249c 9a62 2300 0000 2f01 0001 3301 0000 c701 0000 feff ff00 0000 0000 0000 0000 0000 0000 0124 6508 249c 9a62 2300 0000 2f01 0001 3301 0000 c701 0000 feff ff00 0000 0000 0000 0000 0000 0000 0124 6508 249c 9a62 2300 0000 2f01 0001 3301 0000 c701 0000 feff ff00 0000 0000 0000 0000 0000 0000 0124 6508 249c 9a62 2300 0000 2f01 0001 3301 0000 c701 0000 feff ff00 0000 0000 0000 0000 0000 0000 0124 6508 249c 9a62 2300 0000 2f01 0001 3301 0000 c701 0000 feff ff00 0000 0000 0000 0000 0000 0000 0124 6508 249c 9a62 2300 0000 2f01 0001 3301 0000 c701 0000 feff ff00 0000 0000 0000 0000 0000 0000 0000 0000


        534d 4100 0004 02a0 0000 0001 0206 0010 6065
        81a0 1234 5737 4321 00a1 9901 f6a2 2fb3 0001 0000 0000 3400 0102 8051
        6000 0000 6b00 0000
        0124 6508 249c 9a62 2300 0000 2f01 0001 3301 0000 c701 0000 feff ff00 0000 0000 0000 0000 0000 0000
        0124 6508 249c 9a62 2300 0000 2f01 0001 3301 0000 c701 0000 feff ff00 0000 0000 0000 0000 0000 0000
        0125 6508 249c 9a62 2300 0000 2f01 0001 3301 0000 c701 0000 feff ff00 0000 0000 0000 0000 0000 0000
        0126 6508 249c 9a62 2300 0000 2f01 0001 3301 0000 c701 0000 feff ff00 0000 0000 0000 0000 0000 0000
        0126 6508 249c 9a62 2300 0000 2f01 0001 3301 0000 c701 0000 feff ff00 0000 0000 0000 0000 0000 0000
        0126 6508 249c 9a62 2300 0000 2f01 0001 3301 0000 c701 0000 feff ff00 0000 0000 0000 0000 0000 0000
        0126 6508 249c 9a62 2300 0000 2f01 0001 3301 0000 c701 0000 feff ff00 0000 0000 0000 0000 0000 0000
        013a 6508 249c 9a62 2e01 0001 3301 0000 c701 0000 2203 0000 feff ff00 0000 0000 0000 0000 0000 0000
        011e 6708 747e a162 1b00 0000 3201 0000 3901 0000 4d01 0000 b601 0000 af04 0000 561d 0001 591d 0000
        011e 6708 747e a162 5a1d 0000 5d1d 0000 5e1d 0000 631d 0000 671d 0000 6c1d 0000 6d1d 0000 701d 0000
        011e 6708 747e a162 721d 0000 731d 0000 7d1d 0000 7e1d 0000 7f1d 0000 841d 0000 851d 0000 8d1d 0000
        011e 6708 747e a162 8e1d 0000 8f1d 0000 901d 0000 911d 0000 951d 0000 961d 0000 fdff ff00 feff ff00
        0000 0000

        """.hexStringToData()
        //        print(data1.hexDump)
        let binaryDecoder1 = BinaryDecoder(data: [UInt8](data1))

        var packetcounter = 0
        while !binaryDecoder1.isAtEnd
        {
            let packet = try SMAPacket(fromBinary: binaryDecoder1)
            print(packet)
            packetcounter += 1
        }
        XCTAssert(packetcounter == 5)
    }

    func testSMAPacketDecoding7() throws
    {
        JLog.loglevel = .trace
        let data1 = """
        534d 4100 0004 02a0 0000 0001 0082 0010 6065
        20e0 6901 6d33 26b3 0001 7401 10e7 f0b2 0001 0000 0000 34a5 0e01 026a
        0400 0000
        0760 8908 0087 1f61 7809 0000 3a00 8f90
        0761 8900 0087 1f61 0000 0000 3a00 b59c
        0762 8900 0087 1f61 0000 0000 3a00 4292
        0763 8900 0087 1f61 0000 0000 3a00 ef97
        0764 8900 0087 1f61 3c0f 0000 3a00 7413
        0765 8940 0087 1f61 0000 0000 3a00 0447
        0000 0000



        534d 4100 0004 02a0 0000 0001 0026 0010 6065
        09a0 1234 22b1 4321 00e1 6901 6d33 26b3 0001 0200 0000 0280 0102 8051
        0000 2100 ffff 2000
        0000 0000


        534d 4100 0004 02a0 0000 0001 0052 0010 6065
        14e0 57012b7f bc76 0001 56012b7fbc76 0001 0000 0000 e5ec 0e00 0028
        0003 5000
        4f20 650f 1700 0000
        0000 0000 68b1 0260 10e7 f0b2 4ca9 0060 8455 0360
        0000 0000 6803 0020 10e7 f0b2 4da6 0500 785e 0020
        0000 0000

        534d 4100 0004 02a0 0000 0001 0052 0010 6065
        14e0 5701 2b7f bc76 0001 5601 2b7f bc76 0001 0000 0000 e6ec 0e00 0028
        0003 5000
        3e21 650f 0000 0000
        1700 0000 68b1 0260 10e7 f0b2 4ca9 0060 8455 0360
        0000 0000 6803 0020 10e7 f0b2 4da6 0500 785e 0020
        0000 0000

        534d 4100 0004 02a0 0000 0001 0052 0010 6065
        14e0 5701 2b7f bc76 0001 5601 2b7f bc76 0001 0000 0000 e7ec 0e00 0028
        0003 5000
        2e22 650f 1f00 0000
        0000 0000 68b1 0260 10e7 f0b2 4ca9 0060 8455 0360
        0000 0000 6803 0020 10e7 f0b2 4da6 0500 785e 0020
        0000 0000

        534d 4100 0004 02a0 0000 0001 0052 0010 6065
        14e0 5701 2b7f bc76 0001 5601 2b7f bc76 0001 0000 0000 e8ec 0e00 0028
        0003 5000
        1e23 650f 0e00 0000
        0000 0000 68b1 0260 10e7 f0b2 4ca9 0060 8455 0360
        0000 0000 6803 0020 10e7 f0b2 4da6 0500 785e 0020
        0000 0000

        534d 4100 0004 02a0 0000 0001 0052 0010 6065
        14e0 5701 2b7f bc76 0001 5601 2b7f bc76 0001 0000 0000 0aed 0e00 0028
        0003 5000
        fb42 650f 0c00 0000
        0000 0000 68b1 0260 10e7 f0b2 4ca9 0060 8455 0360
        0000 0000 6803 0020 10e7 f0b2 4da6 0500 785e 0020
        0000 0000

        534d 4100 0004 02a0 0000 0001 0052 0010 6065
        14e0 5701 2b7f bc76 0001 5601 2b7f bc76 0001 0000 0000 37ed 0e00 0028
        0003 5000 286d 650f 0000 0000
        0900 0000 68b1 0260 10e7 f0b2 4ca9 0060 8455 0360
        0000 0000 6803 0020 10e7 f0b2 4da6 0500 785e 0020
        0000 0000

        534d 4100 0004 02a0 0000 0001 0032 0010 6065
        0ce0 9901 f6a2 2fb3 0001 7401 10e7 f0b2 0001 0000 0000 5bcb 0e01 026a
        0400 0000
        0149 9240 4013 2061 a00f 0000 3a00 16bc
        0000 0000


        534d 4100 0004 02a0 0000 0001 0032 0010 6065
        0ce0 5601 2b7f bc76 0001 7401 10e7 f0b2 0001 0000 0000 57cb 0e01 026a
        0400 0000
        0149 9240 3f13 2061 b80b 0000 3a00 ae70
        0000 0000

        534d 4100 0004 02a0 0000 0001 0032 0010 6065
        0ce0 9901 f6a2 2fb3 0001 7401 10e7 f0b2 0001 0000 0000 58cb 0e01 026a
        0400 0000
        0149 9240 3f13 2061 a00f 0000 3a00 563e
        0000 0000

        534d 4100 0004 02a0 0000 0001 0032 0010 6065
        0ce0 5601 2b7f bc76 0001 7401 10e7 f0b2 0001 0000 0000 5ccb 0e01 026a
        0400 0000
        0149 9240 4013 2061 b80b 0000 3a00 eef2
        0000 0000

        534d 4100 0004 02a0 0000 0001 0032 0010 6065
        0ce0 5601 2b7f bc76 0001 7401 10e7 f0b2 0001 0000 0000 1ecc 0e01 026a
        0400 0000
        0149 9240 6913 2061 b80b 0000 3a00 551b
        0000 0000

        534d 4100 0004 02a0 0000 0001 0032 0010 6065
        0ce0 5601 2b7f bc76 0001 7401 10e7 f0b2 0001 0000 0000 2ee2 0e01 026a
        0400 0000
        0149 9240
        4411 2161
        b80b 0000
        3a00 3758
        0000 0000


        534d 4100 0004 02a0 0000 0001 0026 0010 6065
        09e0 6901 6d33 26b3 0000 7401 10e7 f0b2 0000 0000 0000 59cb 0002 e071
        3d13 2061 5913 2061
        0000 0000

        534d 4100 0004 02a0 0000 0001 003e 0010 6065
        0fe0 7401 10e7 f0b2 00a0 6901 6d33 26b3 0000 0000 0000 59cb 0102 e071
        3900 0000 3a00 0000
        3d13 2061 0000 0000 1c01 0000
        3e13 2061 0000 0000 1a01 0000
        0000 0000

        534d 4100 0004 02a0 0000 0001 0026 0010 6065
        09e0 6901 6d33 26b3 0000 7401 10e7 f0b2 0000 0000 0000 2de2 0002 e071
        4311 2161 5d11 2161
        0000 0000

        534d 4100 0004 02a0 0000 0001 0026 0010 6065
        09e0 6901 6d33 26b3 0000 7401 10e7 f0b2 0000 0000 0000 33e2 0002 e071
        4411 2161 5e11 2161
        0000 0000

        534d 4100 0004 02a0 0000 0001 002e 0010 6065
        0b e0 1234abd84321 0001 9901f6a22fb3 0001 0000 0000 0180 0d04 fdff
        0700 0000
        8403 0000 4c20 cb51 0000 0000
        0000 0000


        534d 4100 0004 02a0 0000 0001 002e 0010 6065
        0be0 1234 abd8 4321 0001 9901 f6a2 2fb3 0001 0000 0000 0180 0d04 fdff
        0700 0000
        8403 0000 4c20 cb51 0000 0000
        0000 0000

        534d 4100 0004 02a0 0000 0001 003a 0010 6065
        0ea0 ffff ffff ffff 0001 1234 abd8 4321 0001 0000 0000 0180 0c04 fdff
        0700 0000
        8403 0000 4c20 cb51 0000 0000 dbb8 f4e9 fae7 ddfb edfa 8888
        0000 0000

        534d 4100 0004 02a0 0000 0001 003a 0010 6065
        0ea0 ffff ffff ffff 0001 1234 f2ef 4321 0001 0000 0000 0180 0c04 fdff
        0700 0000
        8403 0000 4c20 cb51 0000 0000
        dbb8 f4e9 fae7 ddfb edfa 8888
        0000 0000


        534d 4100 0004 02a0 0000 0001 0026 0010 6065
        09 a0 ffffffffffff 0001 1234abd84321 0001 0000 0000 0380 0000 0052
        003f 2600 ff3f 2600
        0000 0000

        534d 4100 0004 02a0 0000 0001 0026 0010 6065
        09a0 ffff ffff ffff 0000 7401 10e7 f0b2 0000 0000 0000 60e2 0002 8061
        0048 2100 ff4a 4100
        0000 0000

        534d 4100 0004 02a0 0000 0001 0042 0010 6065
        10a0 7401 10e7 f0b2 00a0 5601 2b7f bc76 0000 0000 0000 61e2 0102 0061
        0200 0000 0200 0000
        013f 2640 4d11 2161 bf03 0000 bf03 0000 bf03 0000 bf03 0000 0100 0000
        0000 0000

        534d 4100 0004 02a0 0000 0001 0036 0010 6065
        0da0 7401 10e7 f0b2 00a0 5601 2b7f bc76 0000 0000 0000 d9e2 0102 0064
        0000 0000 0000 0000
        0101 2600 6611 2161 4886 7800 0000 0000
        0000 0000


        534d 4100 0004 02a0 0000 0001 0042 0010 6065
        10a0 1234 abd8 4321 00a1 9901 f6a2 2fb3 0001 0000 0000 0280 0102 0051
        0000 0000 0000 0000
        013f 2640 c976 a162 6b00 0000 6b00 0000 6b00 0000 6b00 0000 0100 0000
        0000 0000

        """.hexStringToData()
        let binaryDecoder = BinaryDecoder(data: [UInt8](data1))
        var packetcounter = 0
        while !binaryDecoder.isAtEnd
        {
            let packet = try SMAPacket(fromBinary: binaryDecoder)
            print(packet)
            packetcounter += 1
        }
        XCTAssert(packetcounter == 27)
    }

    func testSMAPacketDecoding8() throws
    {
        let data = """

        534d 4100
            0004 02a0 0000 0001 003c  0010 6065
         0e
            A0
            ffff ffff ffff 00
            01
            1234 95b5 4321 00
            01
            0080
            0000
            0002
        0C04 fdff 07000000 84030000 4c20cb51 00000000 dbb8 f4e9 fae7 ddfb edfa 8888  0000 0000

        """.hexStringToData()
        let binaryDecoder = BinaryDecoder(data: [UInt8](data))
        let _ = try? SMAPacket(fromBinary: binaryDecoder)
    }
}
